<?php
    /**
    * Bootstrapping functions, essential and needed for Anax to work together with some common helpers. 
    *
    */
    
    /**
    * Default exception handler.
    *
    */
    function myExceptionHandler($exception) {
        echo "vhaa: Uncaught exception: <p>" . $exception->getMessage() . "</p><pre>" . $exception->getTraceAsString(), "</pre>";
    }
    set_exception_handler('myExceptionHandler');
    
    
    /**
    * Autoloader for classes.
    *
    */
    function myAutoloader($class) {
        $path = ROOT_PATH . "/src/{$class}/{$class}.php";
        if(is_file($path)) {
            include($path);
        }
        else {
            throw new Exception("Classfile '{$class}' does not exists.");
        }
    }
    spl_autoload_register('myAutoloader');
    
    /**
     * Dumpp all contents of a variabel.
     *
     * @param mixed $a as the variabel/array/object to dump.
     */
    function dump($a) {
      echo '<pre>' . print_r($a, 1) . '</pre>';
    }
    
    // -------------------------------------------------------------------------------------------
    //
    // Get current url
    //
    function getCurrentUrl() {
      $url = "http";
      $url .= (@$_SERVER["HTTPS"] == "on") ? 's' : '';
      $url .= "://";
      $serverPort = ($_SERVER["SERVER_PORT"] == "80") ? '' :
        (($_SERVER["SERVER_PORT"] == 443 && @$_SERVER["HTTPS"] == "on") ? '' : ":{$_SERVER['SERVER_PORT']}");
      $url .= $_SERVER["SERVER_NAME"] . $serverPort . htmlspecialchars($_SERVER["REQUEST_URI"]);
      return $url;
    }    
    
    // -------------------------------------------------------------------------------------------
    //
    // Destroy a session
    //
    function destroySession() {
      // Unset all of the session variables.
      $_SESSION = array();
      
      // If it's desired to kill the session, also delete the session cookie.
      // Note: This will destroy the session, and not just the session data!
      if (ini_get("session.use_cookies")) {
          $params = session_get_cookie_params();
          setcookie(session_name(), '', time() - 42000,
              $params["path"], $params["domain"],
              $params["secure"], $params["httponly"]
          );
      }
      
      // Finally, destroy the session.
      session_destroy();
    }
    
    // -------------------------------------------------------------------------------------------
    //
    // Function to open and read a directory, return its content as an array.
    //
    // $aPath: A path to the directory to scan for files. 
    // 
    //  http://php.net/manual/en/function.is-dir.php
    //  http://php.net/manual/en/function.opendir.php
    //  http://php.net/manual/en/function.readdir.php
    //  http://php.net/manual/en/function.is-file.php
    //  http://php.net/manual/en/function.closedir.php
    //  http://php.net/manual/en/function.sort.php
    //  
    function readDirectory($aPath) {
      $list = Array();
      if(is_dir($aPath)) {
        if ($dh = opendir($aPath)) {
          while (($file = readdir($dh)) !== false) {
            if(is_file("$aPath/$file") && $file != '.htaccess') {
              $list[$file] = "$file";
            }
          }
          closedir($dh);
        }
      }
      sort($list, SORT_STRING);
      return $list;
    }
    
    // -------------------------------------------------------------------------
    // Functions to get and put content of a file and returning it if get
    function getFileContent($filePath) {
        if(is_readable($filePath)){
            return file_get_contents($filePath);
        }
        else{
            return "Filen finns inte!";
        }
    }
    
    function setFileContent($filePath, $fileContent){
        if(is_writable($filePath)){
            file_put_contents($filePath, $fileContent);
            return "Ã„ndringar sparade.";
        }
    }
?>